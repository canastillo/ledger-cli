#!/bin/bash

set -e
. "$LEDGER_WORKDIR/common"

# Description of the command usage
cli_help_register() {
    echo "
        Command: register
        Usage: 
        reg -f <file>
    "
    exit 1
}

# If there was no parameter, print the help
[ ! -n "$1" ] && cli_help_register

current_sum=0
value=0
concept=""

read_file() {
    file=$1

    while IFS= read line || [ -n "$line" ]; do      # read file line by line
        if [[ $line =~ !include ]]                  # search for !include lines
        then
            IFS=' ' read -ra WORDS <<< "$line"      # Split line by ' '
            read_file "${WORDS[1]}"                 # print the included file
        elif ! [[ $line =~ \; ]]                    # Ignore lines starting with ";"
        then
            identify_data "$line"                   # Let's identify which data the line has
        fi
    done <$file
}

# Distinguish between metadata (dates and concepts) and transactions
identify_data() {
    data=$1
    if [[ $data =~ ^[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}(.+) ]]
    then
        IFS=' ' read -ra WORDS <<< "${BASH_REMATCH[0]}"
        date=$(format_date ${WORDS[0]})                         # WORDS[0] -> date
        concept="$date ${BASH_REMATCH[1]}"                      # BASH_REMATCH[1] -> concept
    else
        get_transaction_data "$data"
    fi
}

format_date() {
    original_date=$1
    month=""
    day=""

    IFS='/' read -ra WORDS <<< "$original_date"
    
    # Get month from number of month
    case "${WORDS[1]}" in
        1|01)
            month="Jan" ;;
        2|02)
            month="Feb" ;;
        3|03)
            month="Mar" ;;
        4|04)
            month="Apr" ;;
        5|05)
            month="May" ;;
        6|06)
            month="Jun" ;;
        7|07)
            month="Jul" ;;
        8|08)
            month="Aug" ;;
        9|09)
            month="Sep" ;;
        10)
            month="Oct" ;;
        11)
            month="Nov" ;;
        12)
            month="Dec" ;;
    esac

    # Make all dates two digit
    case "${WORDS[2]}" in
        [0-9])
            day="0${WORDS[2]}"
            ;;
        *)
            day="${WORDS[2]}"
            ;;
    esac

    new_date="${WORDS[0]}-$month-$day"
    echo "$new_date"
}

get_transaction_data() {
    transaction=`echo $1 | xargs`
    text=""
    amount=""

    [[ $transaction =~ [[:alpha:]]*:([[:alpha:]]*[[:space:]]*)* ]] && text="${BASH_REMATCH[0]}" || :

    if [[ $transaction =~ (-|\$|[0-9]{1}).* ]]
    then
        amount=${BASH_REMATCH[0]}
        add_number $amount
    else
        restart_sum
        amount=$value
        value=0
    fi

    printf "%-60s %-20s %-10s %-10s\n" "$concept" "$text" "$amount" "$current_sum"

    if  [ concept != "" ]
    then
        concept=""
    fi
}

add_number() {
    qtty=$1
    
    # Remove the $ signs and add the number to the sum
    qtty=`echo $amount| tr -d $`
    current_sum=$(bc -l <<<"${current_sum}+${qtty}")
}

restart_sum() {
    value=$(bc -l <<<"${current_sum}*-1")
    current_sum=0
}

read_file $1